import asyncio
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

waiting = False
isphoto = False
run = True
ANSWER_TEXT = "–í–∞—à –ø–æ–¥–∞—Ä–æ–∫ üéÅ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ 24 —á–∞—Å–∞. –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å üî•. –ü—Ä–∏—à–ª–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ, –æ–Ω–æ –í–∞—Å –Ω–∏ –∫ —á–µ–º—É –Ω–µ –æ–±—è–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏—à–ª—ë—Ç–µ - –≤ —ç—Ç–æ—Ç —Å–∞–º—ã–π –º–æ–º–µ–Ω—Ç —è —Ä–∞—Å—Å—á–∏—Ç–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é –í–∞—à –ø–æ–¥–∞—Ä–æ–∫, –∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–±—Å—É–¥–∏–º –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π üëå."
ANSWER2_TEXT = "–ù–∞—à–∏ –ø–æ—Ä—Ç—Ä–µ—Ç—ã:\nüî• –∏–∑ 100% —Ö–ª–æ–ø–∫–∞\nüî•25 –ª–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ—Ç –≤—ã—Ü–≤–µ—Ç–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–∏—Å–∞–Ω–∏—è\nüî•–†—É—á–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ö—É–¥–æ–∂–Ω–∏–∫–æ–º\n\n–í–∞—à –±–æ–Ω—É—Å —Å–≥–æ—Ä–∏—Ç ‚è≥ —á–µ—Ä–µ–∑ 21 —á–∞—Å, –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –∏–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è\n –í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º —Ñ–æ—Ç–æ?"
ANSWER3_TEXT = "–°–µ–π—á–∞—Å –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –ú–∏–ª–∞ –∏ –ø–æ–º–æ–∂–µ—Ç –í–∞–º"

bot_token = '6513741895:AAHZxWPTy8Z833pOSD3aVvDwECe3ZeREf9M'
bot = Bot(token=bot_token)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())


class Form(StatesGroup):
    photo = State()

@dp.message_handler(state=Form.photo)
@dp.message_handler(content_types=types.ContentType.PHOTO, state=None)
async def process_name(message: types.Message, state: FSMContext):
    global isphoto
    async with state.proxy() as data:
        if waiting and not isphoto:
            isphoto = True
            await message.answer(ANSWER3_TEXT)

async def wait(chat_id, timeToWait, text, message_id):
    global isphoto
    await asyncio.sleep(timeToWait)
    if text and not isphoto and run:
        await bot.send_message(chat_id, text)
    elif not text and isphoto:
        try:
            await bot.delete_message(chat_id, message_id)
            isphoto = False
        except:
            pass


@dp.callback_query_handler(text='off') 
async def inline_kb_answer_callback_handler(query: types.CallbackQuery):
    global run
    if query.data == "off":
        run = False
        await bot.delete_message(mes.chat.id, mes.message_id)

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    global keyboard_markup, mes, run
    PHOTO = types.InputFile("photo.jpeg")
    run = True
    keyboard_markup = types.InlineKeyboardMarkup()
    text_and_data = (("–í–∞—à –ø–æ–¥–∞—Ä–æ–∫ üéÅ  - 1!", 'accept'), ("–í–∞—à –ø–æ–¥–∞—Ä–æ–∫ üéÅ  - 2!", 'accept'), ("–í–∞—à –ø–æ–¥–∞—Ä–æ–∫ üéÅ  - 3!", 'accept'),(("–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å", 'off')))
    row_btns = [types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data]
    for item in row_btns:
        keyboard_markup.row(item)
    mes = await message.answer_photo(PHOTO, reply_markup=keyboard_markup)
    asyncio.create_task(wait(message.chat.id, 10800, ANSWER2_TEXT, mes.message_id))
    asyncio.create_task(wait(message.chat.id, 86400, None, mes.message_id))

@dp.callback_query_handler(text='accept') 
async def inline_kb_answer_callback_handler(query: types.CallbackQuery):
    global waiting
    if query.data == "accept":
        await bot.send_message(query.from_user.id, ANSWER_TEXT)
        waiting = True

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, fast=True, relax=0, timeout=0)